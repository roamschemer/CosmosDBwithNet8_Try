@page "/"
@inject HttpClient Http
@using Data
@using System.Net.Http.Json
@using System.Reflection
@using static Data.Company

<div class="mt-3">
	<!-- 検索フォーム -->
	<h2>Company Management</h2>
	<div class="row mb-3">
		<div class="col-md-6">
			<h3>Company Search</h3>
			<div class="form-group">
				<label for="name">Name:</label>
				<input type="text" id="name" @bind="searchName" class="form-control" />
			</div>
			<div class="form-group">
				<label for="category">Category:</label>
				<select id="category" @bind="searchCategory" class="form-control">
					<option value="">All</option>
					@foreach (var enumValue in Enum.GetValues(typeof(CategoryDatas))) {
						<option value="@enumValue">@enumValue.ToString()</option>
					}
				</select>
			</div>
			<button class="btn btn-primary" @onclick="GetCompanyData">Search</button>
		</div>
		<div class="col-md-6">
			<h3>Add New Company</h3>
			<div class="form-group">
				<label for="newCompanyName">Name:</label>
				<input type="text" id="newCompanyName" @bind="newCompany.Name" class="form-control" />
			</div>
			<div class="form-group">
				<label for="newCompanyCategory">Category:</label>
				<select id="newCompanyCategory" @bind="newCompany.Category" class="form-control">
					@foreach (var enumValue in Enum.GetValues(typeof(CategoryDatas))) {
						<option value="@enumValue">@enumValue</option>
					}
				</select>
			</div>
			<button class="btn btn-success" @onclick="AddCompanyAsync">Add Company</button>
		</div>
	</div>


	<!-- ErrorMessage -->
	@if (errorMessage != null) {
		<div class="error-popup">
			<ul>
				<li>@errorMessage</li>
			</ul>
		</div>
	}

	<!-- 企業リスト -->
	<div class="d-flex flex-wrap">
		@if (_companies == null) {
			<p>Loading...</p>
		}
		else if (_companies.Count == 0) {
			<p>No companies found.</p>
		}
		else {
			<table class="table mt-3">
				<thead>
					<tr>
						<th>Id</th>
						<th>Category</th>
						<th>Name</th>
						<th>CreatedAt</th>
						<th>Actions</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var company in _companies) {
						<tr>
							<td>@company.Id</td>
							<td>@company.Category</td>
							<td>@company.Name</td>
							<td>@company.CreatedAt</td>
							<td>@company.UpdatedAt</td>
							<td>
								<button class="btn btn-primary" @onclick="() => EditCompanyAsync(company)">Edit</button>
								<button class="btn btn-primary" @onclick="() => DeleteCompanyAsync(company)">Delete</button>
							</td>
						</tr>
					}
				</tbody>
			</table>
		}
	</div>
</div>

<!-- モーダル -->
@if (selectedCompany != null) {
	<div class="modal fade show" style="display: block; background: rgba(0, 0, 0, 0.5);">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h5 class="modal-title">Edit Company</h5>
					<button type="button" class="btn-close" @onclick="CloseModal"></button>
				</div>
				<div class="modal-body">
					<div class="form-group">
						<label for="editCompanyName">Name:</label>
						<input type="text" id="editCompanyName" @bind="selectedCompany.Name" class="form-control" />
					</div>
				</div>
				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
					<button type="button" class="btn btn-primary" @onclick="UpdateCompanyAsync">Save changes</button>
				</div>
			</div>
		</div>
	</div>
}

@code {
	private List<Company> _companies;
	private string searchName = string.Empty;
	private CategoryDatas? searchCategory;
	private Company newCompany = new Company();
	private Company selectedCompany;
	private string? errorMessage;

	protected override async Task OnInitializedAsync() {
		await GetCompanyData();
	}

	private async Task GetCompanyData() {
		var query = "api/companies";
		var parameters = new List<string>();

		if (!string.IsNullOrEmpty(searchName)) {
			parameters.Add($"name={searchName}");
		}
		if (searchCategory.HasValue) {
			parameters.Add($"category={searchCategory}");
		}
		if (parameters.Any()) {
			query += "?" + string.Join("&", parameters);
		}

		_companies = await Http.GetFromJsonAsync<List<Company>>(query);
		errorMessage = null;


	}

	private async Task AddCompanyAsync() {
		var response = await Http.PostAsJsonAsync("api/companies", newCompany);
		if (response.IsSuccessStatusCode) {
			await GetCompanyData(); // Fetch updated data
			newCompany = new Company(); // Reset the form
		}
		else {
			errorMessage = await response.Content.ReadAsStringAsync();
		}
	}

	private void EditCompanyAsync(Company company) {
		selectedCompany = company;
	}

	private async Task DeleteCompanyAsync(Company company) {
		var response = await Http.DeleteAsync($"api/companies/{company.Id}/{company.Category}");
		if (response.IsSuccessStatusCode) {
			await GetCompanyData(); // Fetch updated data
		}
		else {
			errorMessage = await response.Content.ReadAsStringAsync();

		}
	}

	private async Task UpdateCompanyAsync() {
		var response = await Http.PatchAsJsonAsync($"api/companies", selectedCompany);
		if (response.IsSuccessStatusCode) {
			await GetCompanyData(); // Fetch updated data
			selectedCompany = null; // Close the modal
		}
		else {
			errorMessage = await response.Content.ReadAsStringAsync();
		}
	}

	private void CloseModal() {
		selectedCompany = null;
	}
}